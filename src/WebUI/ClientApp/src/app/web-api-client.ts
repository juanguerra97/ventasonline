//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IProductosClient {
    getProductos(): Observable<Producto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductosClient implements IProductosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProductos(): Observable<Producto[]> {
        let url_ = this.baseUrl + "/api/Productos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Producto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Producto[]>;
        }));
    }

    protected processGetProductos(response: HttpResponseBase): Observable<Producto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Producto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Producto[]>(null as any);
    }
}

export abstract class AuditableEntity implements IAuditableEntity {
    status?: string;
    fechaInsert?: Date;
    usuarioInsert?: string | undefined;
    fechaUpdate?: Date | undefined;
    usuarioUpdate?: string | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.fechaInsert = _data["fechaInsert"] ? new Date(_data["fechaInsert"].toString()) : <any>undefined;
            this.usuarioInsert = _data["usuarioInsert"];
            this.fechaUpdate = _data["fechaUpdate"] ? new Date(_data["fechaUpdate"].toString()) : <any>undefined;
            this.usuarioUpdate = _data["usuarioUpdate"];
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["fechaInsert"] = this.fechaInsert ? this.fechaInsert.toISOString() : <any>undefined;
        data["usuarioInsert"] = this.usuarioInsert;
        data["fechaUpdate"] = this.fechaUpdate ? this.fechaUpdate.toISOString() : <any>undefined;
        data["usuarioUpdate"] = this.usuarioUpdate;
        return data;
    }
}

export interface IAuditableEntity {
    status?: string;
    fechaInsert?: Date;
    usuarioInsert?: string | undefined;
    fechaUpdate?: Date | undefined;
    usuarioUpdate?: string | undefined;
}

export class Producto extends AuditableEntity implements IProducto {
    id?: number;
    nombre?: string;
    descripcion?: string;
    foto?: string;
    precios?: Precio[];
    categorias?: ProductoCategoria[];

    constructor(data?: IProducto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.descripcion = _data["descripcion"];
            this.foto = _data["foto"];
            if (Array.isArray(_data["precios"])) {
                this.precios = [] as any;
                for (let item of _data["precios"])
                    this.precios!.push(Precio.fromJS(item));
            }
            if (Array.isArray(_data["categorias"])) {
                this.categorias = [] as any;
                for (let item of _data["categorias"])
                    this.categorias!.push(ProductoCategoria.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Producto {
        data = typeof data === 'object' ? data : {};
        let result = new Producto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["descripcion"] = this.descripcion;
        data["foto"] = this.foto;
        if (Array.isArray(this.precios)) {
            data["precios"] = [];
            for (let item of this.precios)
                data["precios"].push(item.toJSON());
        }
        if (Array.isArray(this.categorias)) {
            data["categorias"] = [];
            for (let item of this.categorias)
                data["categorias"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IProducto extends IAuditableEntity {
    id?: number;
    nombre?: string;
    descripcion?: string;
    foto?: string;
    precios?: Precio[];
    categorias?: ProductoCategoria[];
}

export class Precio extends AuditableEntity implements IPrecio {
    id?: number;
    productoId?: number;
    descripcion?: string;
    valorPrecio?: number;

    constructor(data?: IPrecio) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.productoId = _data["productoId"];
            this.descripcion = _data["descripcion"];
            this.valorPrecio = _data["valorPrecio"];
        }
    }

    static fromJS(data: any): Precio {
        data = typeof data === 'object' ? data : {};
        let result = new Precio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productoId"] = this.productoId;
        data["descripcion"] = this.descripcion;
        data["valorPrecio"] = this.valorPrecio;
        super.toJSON(data);
        return data;
    }
}

export interface IPrecio extends IAuditableEntity {
    id?: number;
    productoId?: number;
    descripcion?: string;
    valorPrecio?: number;
}

export class ProductoCategoria extends AuditableEntity implements IProductoCategoria {
    productoId?: number;
    categoriaId?: number;

    constructor(data?: IProductoCategoria) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productoId = _data["productoId"];
            this.categoriaId = _data["categoriaId"];
        }
    }

    static fromJS(data: any): ProductoCategoria {
        data = typeof data === 'object' ? data : {};
        let result = new ProductoCategoria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productoId"] = this.productoId;
        data["categoriaId"] = this.categoriaId;
        super.toJSON(data);
        return data;
    }
}

export interface IProductoCategoria extends IAuditableEntity {
    productoId?: number;
    categoriaId?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}